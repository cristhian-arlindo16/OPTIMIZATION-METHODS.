import streamlit as st
import numpy as np
import sympy as sp
import matplotlib.pyplot as plt

# ==============================
# CONFIGURACI√ìN DE LA P√ÅGINA
# ==============================
st.set_page_config(page_title="Verificaci√≥n de Convexidad", page_icon="üìà", layout="centered")

# ==============================
# T√çTULO Y DESCRIPCI√ìN
# ==============================
st.title("üìà An√°lisis de Convexidad de Funciones Matem√°ticas")
st.markdown("""
Este programa permite verificar si una funci√≥n es **convexa** en un intervalo determinado.
Ingrese una funci√≥n matem√°tica en t√©rminos de `x` y el sistema calcular√° su **segunda derivada**, 
analizando si cumple la condici√≥n de **convexidad**.

üîπ **Convexidad:** Una funci√≥n \( f(x) \) es convexa si su segunda derivada \( f''(x) \geq 0 \) en un intervalo.
""")

# ==============================
# ENTRADA DE LA FUNCI√ìN
# ==============================
st.sidebar.header("üìå Par√°metros de Entrada")

# Funci√≥n ingresada por el usuario
func_str = st.sidebar.text_input("‚úçÔ∏è Ingrese la funci√≥n f(x):", value="x**2")

# Intervalo para el an√°lisis
st.sidebar.markdown("üìå **Seleccione el intervalo de an√°lisis:**")
col1, col2 = st.sidebar.columns(2)
x_min = col1.number_input("üîπ Inicio", value=-10)
x_max = col2.number_input("üîπ Fin", value=10)

# ==============================
# C√ÅLCULO DE DERIVADAS Y AN√ÅLISIS
# ==============================
x = sp.Symbol('x')

try:
    # Convertir la funci√≥n ingresada en una expresi√≥n simb√≥lica
    func = sp.sympify(func_str)

    # Calcular derivadas
    first_derivative = sp.diff(func, x)
    second_derivative = sp.diff(first_derivative, x)

    # Evaluar la convexidad en un rango de valores
    x_vals = np.linspace(x_min, x_max, 400)
    f_vals = np.array([func.subs(x, val).evalf() for val in x_vals])
    f2_vals = np.array([second_derivative.subs(x, val).evalf() for val in x_vals])

    # Determinar si la funci√≥n es convexa
    is_convex = np.all(f2_vals >= 0)

    # ==============================
    # RESULTADO Y VISUALIZACI√ìN
    # ==============================
    st.markdown("## üìä Resultados del An√°lisis")

    # Mostrar derivadas en formato matem√°tico
    st.markdown("### üîπ Primera y Segunda Derivada")
    st.latex(f"f'(x) = {sp.latex(first_derivative)}")
    st.latex(f"f''(x) = {sp.latex(second_derivative)}")

    # Mostrar resultado de la convexidad
    if is_convex:
        st.success("‚úÖ La funci√≥n es convexa en el intervalo analizado.")
    else:
        st.error("‚ùå La funci√≥n NO es convexa en el intervalo analizado.")

    # ==============================
    # GRAFICAR FUNCI√ìN Y SEGUNDA DERIVADA
    # ==============================
    st.markdown("### üìà Gr√°fica de la Funci√≥n y su Segunda Derivada")

    fig, ax = plt.subplots(figsize=(8, 5))
    ax.plot(x_vals, f_vals, label="f(x)", linewidth=2)
    ax.plot(x_vals, f2_vals, linestyle="dashed", label="f''(x)", linewidth=2, color='red')
    ax.axhline(0, color="black", linewidth=1, linestyle="--")
    ax.set_xlabel("x")
    ax.set_ylabel("Valores")
    ax.legend()
    ax.set_title("Funci√≥n y su Segunda Derivada")
    st.pyplot(fig)

except Exception as e:
    st.error(f"‚ùå Error al procesar la funci√≥n: {e}")
    st.warning("Aseg√∫rese de ingresar una funci√≥n v√°lida en t√©rminos de 'x'. Ejemplo: `x**2`, `exp(x)`, `sin(x)`, etc.")
