import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# ==============================
# CONFIGURACI√ìN DE LA P√ÅGINA
# ==============================
st.set_page_config(page_title="Verificador de Convexidad", page_icon="üìà", layout="centered")

# ==============================
# T√çTULO Y DESCRIPCI√ìN
# ==============================
st.title("üìà Verificador de Convexidad de Funciones Matem√°ticas")
st.markdown("""
Esta aplicaci√≥n permite verificar si una funci√≥n matem√°tica es **convexa** en un intervalo determinado.  
Ingrese una funci√≥n en t√©rminos de `x` y el sistema calcular√° su **segunda derivada**,  
analizando si cumple la condici√≥n de **convexidad**.

üîπ **Convexidad:** Una funci√≥n \( f(x) \) es convexa si su segunda derivada \( f''(x) \geq 0 \) en un intervalo.
""")

# ==============================
# ENTRADA DE DATOS (SIDEBAR)
# ==============================
st.sidebar.header("üìå Par√°metros de Entrada")

# Funci√≥n ingresada por el usuario
func_str = st.sidebar.text_input("‚úçÔ∏è Ingrese la funci√≥n f(x):", value="x**2")

# Intervalo para el an√°lisis
st.sidebar.markdown("üìå **Seleccione el intervalo de an√°lisis:**")
col1, col2 = st.sidebar.columns(2)
x_min = col1.number_input("üîπ Inicio", value=-10.0)
x_max = col2.number_input("üîπ Fin", value=10.0)

# Verificaci√≥n de valores inv√°lidos
if x_min >= x_max:
    st.sidebar.error("‚ö†Ô∏è El inicio del intervalo debe ser menor que el fin.")
    st.stop()

# ==============================
# C√ÅLCULO DE DERIVADAS Y AN√ÅLISIS
# ==============================
try:
    # Crear el rango de valores de x
    x_vals = np.linspace(x_min, x_max, 400)

    # Convertir la funci√≥n ingresada en una expresi√≥n evaluable con NumPy
    def f(x):
        try:
            return eval(func_str, {"x": x, "np": np})
        except Exception:
            return np.nan  # Retorna NaN si hay error en la funci√≥n

    # Evaluar la funci√≥n en el dominio
    f_vals = f(x_vals)

    # Verificaci√≥n: Si hay valores NaN, detener el programa
    if np.isnan(f_vals).any():
        st.error("‚ö†Ô∏è Error en la funci√≥n ingresada. Revise la sintaxis.")
        st.stop()

    # Calcular la primera y segunda derivada usando numpy.gradient
    f_prime_vals = np.gradient(f_vals, x_vals)
    f_double_prime_vals = np.gradient(f_prime_vals, x_vals)

    # Determinar si la funci√≥n es convexa en el dominio
    is_convex = np.all(f_double_prime_vals >= 0)

    # ==============================
    # RESULTADO Y VISUALIZACI√ìN
    # ==============================
    st.markdown("## üìä Resultados del An√°lisis")

    # Mostrar resultado de la convexidad
    if is_convex:
        st.success("‚úÖ La funci√≥n es convexa en el intervalo analizado.")
    else:
        st.error("‚ùå La funci√≥n NO es convexa en el intervalo analizado.")

    # ==============================
    # GRAFICAR FUNCI√ìN Y SEGUNDA DERIVADA
    # ==============================
    st.markdown("### üìà Gr√°fica de la Funci√≥n y su Segunda Derivada")

    fig, ax = plt.subplots(figsize=(8, 5))
    ax.plot(x_vals, f_vals, label="f(x)", linewidth=2)
    ax.plot(x_vals, f_double_prime_vals, linestyle="dashed", label="f''(x)", linewidth=2, color='red')
    ax.axhline(0, color="black", linewidth=1, linestyle="--")
    ax.set_xlabel("x")
    ax.set_ylabel("Valores")
    ax.legend()
    ax.set_title("Funci√≥n y su Segunda Derivada")
    st.pyplot(fig)

except Exception as e:
    st.error(f"‚ùå Error inesperado: {e}")
    st.warning("Aseg√∫rese de ingresar una funci√≥n v√°lida en t√©rminos de 'x'. Ejemplo: `x**2`, `np.exp(x)`, `np.sin(x)`, etc.")
